{"ast":null,"code":"var _jsxFileName = \"/home/omkar/webdev/om/todoist/src/components/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Checkbox } from \"./Checkbox\";\nimport { useProjects, useTasks } from \"../hooks/index\";\nimport { collatedTasksExist, getTitle, getCollatedTitle } from \"../helpers\";\nimport { collatedTasks } from \"../constants\";\nimport { useSelectedProjectValue, useProjectsValue } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tasks = () => {\n  _s();\n\n  let {\n    selectedProject\n  } = useSelectedProjectValue();\n  const {\n    projects\n  } = useProjectsValue();\n  const {\n    tasks\n  } = useTasks(\"1\");\n  selectedProject = \"1\";\n  console.log(\"selected \", selectedProject);\n  console.log(\"om\", projects);\n  console.log(\"tasks\", tasks);\n  let projectName = \"\";\n\n  if (projects && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, \"INBOX\");\n    console.log(\"project name 1 : \", projectName);\n  }\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    //if we select inboc,next 7 then\n    projectName = getCollatedTitle(collatedTasks, selectedProject);\n    console.log(\"project name 2 : \", projectName);\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    \"data-test-id\": \"tasks\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      \"data-test-id\": \"project-name\",\n      children: projectName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"task__list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          id: task.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, `${task.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tasks, \"thsMrt5gYIIVY+9yxer4YyUetlA=\", false, function () {\n  return [useSelectedProjectValue, useProjectsValue, useTasks];\n});\n\n_c = Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/omkar/webdev/om/todoist/src/components/Tasks.js"],"names":["React","useState","useEffect","Checkbox","useProjects","useTasks","collatedTasksExist","getTitle","getCollatedTitle","collatedTasks","useSelectedProjectValue","useProjectsValue","Tasks","selectedProject","projects","tasks","console","log","projectName","document","title","map","task","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,kBAAT,EAA6BC,QAA7B,EAAuCC,gBAAvC,QAA+D,YAA/D;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,YAA1D;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACzB,MAAI;AAAEC,IAAAA;AAAF,MAAsBH,uBAAuB,EAAjD;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeH,gBAAgB,EAArC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAYV,QAAQ,CAAC,GAAD,CAA1B;AACAQ,EAAAA,eAAe,GAAG,GAAlB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,eAAzB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,QAAlB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,MAAIG,WAAW,GAAG,EAAlB;;AAEA,MAAIJ,QAAQ,IAAID,eAAZ,IAA+B,CAACP,kBAAkB,CAACO,eAAD,CAAtD,EAAyE;AACvEK,IAAAA,WAAW,GAAGX,QAAQ,CAACO,QAAD,EAAW,OAAX,CAAtB;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,WAAjC;AACD;;AAED,MAAIZ,kBAAkB,CAACO,eAAD,CAAlB,IAAuCA,eAA3C,EAA4D;AAC1D;AACAK,IAAAA,WAAW,GAAGV,gBAAgB,CAACC,aAAD,EAAgBI,eAAhB,CAA9B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,WAAjC;AACD;;AAEDhB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACC,KAAT,GAAkB,GAAEF,WAAY,WAAhC;AACD,GAFQ,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,oBAAa,OAApC;AAAA,4BACE;AAAI,sBAAa,cAAjB;AAAA,gBAAiCA;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBACGH,KAAK,CAACM,GAAN,CAAWC,IAAD,iBACT;AAAA,gCACE,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEA,IAAI,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOD,IAAI,CAACA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAU,GAAEA,IAAI,CAACC,EAAG,EAApB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAxCM;;GAAMX,K;UACeF,uB,EACLC,gB,EACHN,Q;;;KAHPO,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Checkbox } from \"./Checkbox\";\nimport { useProjects, useTasks } from \"../hooks/index\";\nimport { collatedTasksExist, getTitle, getCollatedTitle } from \"../helpers\";\nimport { collatedTasks } from \"../constants\";\nimport { useSelectedProjectValue, useProjectsValue } from \"../context\";\n\nexport const Tasks = () => {\n  let { selectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n  const { tasks } = useTasks(\"1\");\n  selectedProject = \"1\";\n  console.log(\"selected \", selectedProject);\n  console.log(\"om\", projects);\n  console.log(\"tasks\", tasks);\n  let projectName = \"\";\n\n  if (projects && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, \"INBOX\");\n\n    console.log(\"project name 1 : \", projectName);\n  }\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    //if we select inboc,next 7 then\n    projectName = getCollatedTitle(collatedTasks, selectedProject);\n    console.log(\"project name 2 : \", projectName);\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  });\n\n  return (\n    <div className=\"tasks\" data-test-id=\"tasks\">\n      <h2 data-test-id=\"project-name\">{projectName}</h2>\n\n      <ul className=\"task__list\">\n        {tasks.map((task) => (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}