{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { firebase } from \"../firebase\";\nimport moment from \"moment\";\nimport { collatedTasksExist } from \"../helpers/index\";\nexport const useTasks = selectedProject => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    let unsubscribe = firebase.firestore().collection(\"tasks\").where(\"userId\", \"==\", \"jlIFXIwyAL3tzHMtzRbw\");\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? unsubscribe = unsubscribe.where(\"projectId\", \"==\", selectedProject) : selectedProject === \"TODAY\" ? unsubscribe = unsubscribe.where(\"date\", \"==\", moment().format(\"DD/MM/YYYY\")) : selectedProject === \"INBOX\" || selectedProject === 0 ? unsubscribe = unsubscribe.where(\"date\", \"==\", \"\") : unsubscribe;\n    unsubscribe = unsubscribe.onSnapshot(snapShot => {\n      const newTasks = snapShot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      setTasks(selectedProject === \"NEXT_7\" ? newTasks.filter(task => moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") <= 7 && task.archived != true) : newTasks.filter(task => task.archived !== true));\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n    return () => unsubscribe();\n  }, [selectedProject]);\n  return {\n    tasks,\n    archivedTasks\n  };\n}; // const selectedProject=1;\n// const {tasks,archivedTasks } =useTasks(selectedProject);\n\n_s(useTasks, \"lkbYbSuB/cNTkTVEXjLheUMZ+l8=\");\n\nexport const useProjects = () => {\n  _s2();\n\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    firebase.firestore().collection(\"projects\").where(\"userId\", \"==\", \"jlIFXIwyAL3tzHMtzRbw\").orderBy(\"projectId\").get().then(snapshot => {\n      const allProjects = snapshot.docs.map(project => ({ ...project.data(),\n        docId: project.id\n      }));\n\n      if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n        setProjects(allProjects);\n      }\n    });\n  }, [projects]);\n  return {\n    projects,\n    setProjects\n  };\n};\n\n_s2(useProjects, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");","map":{"version":3,"sources":["/home/omkar/webdev/om/todoist/src/hooks/index.js"],"names":["useState","useEffect","firebase","moment","collatedTasksExist","useTasks","selectedProject","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","firestore","collection","where","format","onSnapshot","snapShot","newTasks","docs","map","task","id","data","filter","date","diff","archived","useProjects","projects","setProjects","orderBy","get","then","snapshot","allProjects","project","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { firebase } from \"../firebase\";\nimport moment from \"moment\";\nimport { collatedTasksExist } from \"../helpers/index\";\nexport const useTasks = (selectedProject) => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n\n  useEffect(() => {\n    let unsubscribe = firebase\n      .firestore()\n      .collection(\"tasks\")\n      .where(\"userId\", \"==\", \"jlIFXIwyAL3tzHMtzRbw\");\n\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where(\"projectId\", \"==\", selectedProject))\n        : selectedProject === \"TODAY\"\n        ? (unsubscribe = unsubscribe.where(\n            \"date\",\n            \"==\",\n            moment().format(\"DD/MM/YYYY\")\n          ))\n        : selectedProject === \"INBOX\" || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where(\"date\", \"==\", \"\"))\n        : unsubscribe;\n\n    unsubscribe = unsubscribe.onSnapshot((snapShot) => {\n      const newTasks = snapShot.docs.map((task) => ({\n        id: task.id,\n        ...task.data(),\n      }));\n\n      setTasks(\n        selectedProject === \"NEXT_7\"\n          ? newTasks.filter(\n              (task) =>\n                moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") <= 7 &&\n                task.archived != true\n            )\n          : newTasks.filter((task) => task.archived !== true)\n      );\n\n      setArchivedTasks(newTasks.filter((task) => task.archived !== false));\n    });\n\n    return () => unsubscribe();\n  }, [selectedProject]);\n\n  return { tasks, archivedTasks };\n};\n\n// const selectedProject=1;\n// const {tasks,archivedTasks } =useTasks(selectedProject);\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"projects\")\n      .where(\"userId\", \"==\", \"jlIFXIwyAL3tzHMtzRbw\")\n      .orderBy(\"projectId\")\n      .get()\n      .then((snapshot) => {\n        const allProjects = snapshot.docs.map((project) => ({\n          ...project.data(),\n          docId: project.id,\n        }));\n\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n          setProjects(allProjects);\n        }\n      });\n  }, [projects]);\n\n  return { projects, setProjects };\n};\n"]},"metadata":{},"sourceType":"module"}